stages:
  - pre
  - build
  - post
  - deploy

variables:
  RASA_VERSION: "3.1.7-spacy-en"
  # DOCKER_REGISTRY: "https://index.docker.io/v1/"
  DOCKER_USERNAME: "stephens"
  DOCKER_IMAGE_NAME: "financial-demo"
  DOCKER_IMAGE_TAG: "test"
  DOCKER_TLS_CERTDIR: "/certs"

pre:rasa:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  stage: pre
  image:
    name: rasa/rasa:${RASA_VERSION}
    entrypoint: [""]
  script:
    # Confirm rasa versions are compatible
    - export RASA_PKG_VERSION=$(grep "rasa\[spacy\]" requirements.txt | awk -F"[=<>][=<>]" '{print $2}' | awk -F"." '{print $1 "." $2 }')
    - export RASA_SDK_PKG_VERSION=$(grep "rasa-sdk" requirements.txt | awk -F"[=<>][=<>]" '{print $2}' | awk -F"." '{print $1 "." $2 }')
    - test $RASA_PKG_VERSION == $RASA_SDK_PKG_VERSION
    - rasa data validate

build:rasa:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $RASA_PKG_VERSION != $RASA_SDK_PKG_VERSION
  needs: ["pre:rasa"]
  stage: build
  image:
    name: rasa/rasa:${RASA_VERSION}
    entrypoint: [""]
  script:
    - rasa train
    # - python format_results.py
  artifacts:
    paths:
      - models/
    expire_in: 1 month

post:rasa:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  needs: ["build:rasa"]
  stage: post
  image:
    name: rasa/rasa:${RASA_VERSION}
    entrypoint: [""]
  script:
    # - rasa test --fail-on-prediction-errors
    - rasa test
    # - rasa test nlu -f 5 --cross-validation
    # - python format_results.py
  artifacts:
    paths:
      - results/
    expire_in: 1 month


deploy:rasa:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  needs: ["build:rasa"]
  stage: deploy
  image: debian:wheezy
  script:
    - ls -l
    - ls -l models/
    - MODEL_PATH=`ls models/*.tar.gz | head -n 1`
    - ls -l ${MODEL_PATH}
    - curl -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASS} -T ${MODEL_PATH} "https://gstephens.jfrog.io/artifactory/models-generic-local/model.tar.gz"

pre:actions:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  stage: pre
  image: python:3.8-buster
  before_script:
    - python -m pip install -U 'pip<20'
    - pip install -r requirements-dev.txt
  script:
    # - black actions --line-length 79
    - flake8 actions
    # - black --check actions --line-length 79
    # - pytype --keep-going actions
    # Confirm rasa versions are compatible
    - export RASA_PKG_VERSION=$(grep "rasa\[spacy\]" requirements.txt | awk -F"[=<>][=<>]" '{print $2}' | awk -F"." '{print $1 "." $2 }')
    - export RASA_SDK_PKG_VERSION=$(grep "rasa-sdk" requirements.txt | awk -F"[=<>][=<>]" '{print $2}' | awk -F"." '{print $1 "." $2 }')
    - test $RASA_PKG_VERSION == $RASA_SDK_PKG_VERSION

build:actions:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $RASA_PKG_VERSION != $RASA_SDK_PKG_VERSION
  stage: build
  needs: ["pre:actions"]
  image: docker:20.10-dind
  services:
    - docker:20.10-dind
  before_script:
    # - mkdir -p $HOME/.docker
    # - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
    - docker login -u $DOCKER_USERNAME -p $DOCKER_REGISTRY_PASS
  script:
    - docker pull ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest || true
    - docker build --cache-from ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest -t ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f Dockerfile .
    - docker images
    - echo pushing ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
    - docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
